version: 2.1

commands:
  test_crd_command:
    description: "Testing CRD controller on Kubernetes cluster with the specified version"
    parameters:
      kubernetesVersion:
        type: string
        default: "1.14"
    steps:
      - checkout
      - restore_cache:
          keys: 
            - docker_api_cache_key-{{ .Revision }}
      - run:
          name: install
          environment:
            kubernetesVersion: parameters.kubernetesVersion
          command: |
            tests/crd-controller/run-tests.sh << parameters.kubernetesVersion >>
          no_output_timeout: 3600
jobs:
  test_cli:
    docker:
      - image: node:10-alpine

    steps:
      - checkout
      - run:
          name: Run unit tests
          working_directory: "cli"
          command: |
            yarn
            yarn eslint
            yarn test

  build_api:
    machine: true

    steps:
      - checkout
      - run:
          name: Build decryptor docker image
          command: docker build . -t kamus-decryptor
      - run:
          name: Build encryptor docker image
          command: docker build . -t kamus-encryptor --build-arg PROJECT_NAME=encrypt-api
      - run:
          name: Build CRD controller docker image
          command: docker build . -t crd-controller --build-arg PROJECT_NAME=crd-controller
      - run:
          name: Save docker image
          command: |
            mkdir -p docker-cache-api
            docker save -o docker-cache-api/kamus-decryptor.tar kamus-decryptor
            docker save -o docker-cache-api/kamus-encryptor.tar kamus-encryptor
            docker save -o docker-cache-api/crd-controller.tar crd-controller
      - save_cache:
          key: docker_api_cache_key-{{ .Revision }}
          paths:
            - docker-cache-api

  test_blackbox:
    machine: true
    steps:
      - checkout
      - restore_cache:
          keys: 
            - docker_api_cache_key-{{ .Revision }}
      - run:
          name: Restore images
          command: |
            docker load < docker-cache-api/kamus-decryptor.tar
            docker load < docker-cache-api/kamus-encryptor.tar
      - run:
          name: Run black box tests
          command: docker-compose -f tests/blackbox/compose/docker-compose.yaml up --build --exit-code-from black-box --abort-on-container-exit
          environment:
            ENCRYPTOR_IMAGE: kamus-encryptor
            DECRYPTOR_IMAGE: kamus-decryptor
      - run:
          name: Parse Zap's Report 
          command: |
            docker run --rm -v $(pwd)/tests/blackbox/compose/reports/:/input -v $(pwd)/glue/:/config soluto/glue-ci:1551818801630 sh -x /app/run_glue.sh /config/glue.json /input/report.json
        
      - store_artifacts:
          path: tests/blackbox/compose/reports/
          destination: zap-reports
  
  test_crd_1_16:
    machine: true
    steps:
      - test_crd_command:
          kubernetesVersion: "v1.16.4"

  test_crd_1_17:
    machine: true
    steps:
      - test_crd_command:
          kubernetesVersion: "v1.17.2"

  test_crd_1_18:
    machine: true
    steps:
      - test_crd_command:
          kubernetesVersion: "v1.18.0"

  run_tests:
    docker:
      - image: mcr.microsoft.com/dotnet/core/sdk:3.1

    steps:
      - checkout
      - run:
          name: Run unit tests
          working_directory: "tests/unit"
          command: dotnet test
      - run:
          name: Run integration
          working_directory: "tests/integration"
          command: dotnet test

  lint-scripts:
    docker:
      - image: koalaman/shellcheck-alpine
    steps:
      - checkout
      - run:
          name: lint
          command: |
            shellcheck -x ci/version_to_deploy.sh
            shellcheck -x ci/version_to_deploy_init.sh
            shellcheck -x ci/version_to_deploy_cli_docker.sh
            shellcheck -x tests/crd-controller/run-tests.sh

  push-api-images:
    docker:
      - image: circleci/buildpack-deps:trusty
    steps:
      - checkout 
      - setup_remote_docker
      - run:
          name: Install and configure dependencies
          command: |
            git config user.email "ci-build@soluto.com"
            git config user.name "ci-build"
      - run:
          name: tag branch
          command: |
            ./ci/version_to_deploy.sh

      - add_ssh_keys:
          fingerprints:
            - "f1:c6:0c:fd:87:74:65:84:2f:6e:49:97:ec:6f:20:a5"
      - restore_cache:
          keys: 
            - docker_api_cache_key-{{ .Revision }}
      - run:
          name: Restore image
          command: |
            docker load < docker-cache-api/kamus-decryptor.tar
            docker load < docker-cache-api/kamus-encryptor.tar
            docker load < docker-cache-api/crd-controller.tar
            docker tag kamus-decryptor soluto/kamus:$DECRYPTOR_API_DOCKER_TAG
            docker tag kamus-encryptor soluto/kamus:$ENCRYPTOR_API_DOCKER_TAG
            docker tag crd-controller soluto/kamus:$CONTROLLER_API_DOCKER_TAG
      - run:
          name: Docker push version
          working_directory: "init-container/tests"
          command: |
            docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_PASSWORD 
            docker push soluto/kamus:$DECRYPTOR_API_DOCKER_TAG
            docker push soluto/kamus:$ENCRYPTOR_API_DOCKER_TAG
            docker push soluto/kamus:$CONTROLLER_API_DOCKER_TAG
      - run:
          name: Docker push latest
          working_directory: "init-container/tests"
          command: |
            docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_PASSWORD 
            docker tag soluto/kamus:$DECRYPTOR_API_DOCKER_TAG soluto/kamus:decryptor-latest
            docker tag soluto/kamus:$ENCRYPTOR_API_DOCKER_TAG soluto/kamus:encryptor-latest
            docker tag soluto/kamus:$CONTROLLER_API_DOCKER_TAG soluto/kamus:contoller-latest

            docker push soluto/kamus:decryptor-latest
            docker push soluto/kamus:encryptor-latest
            docker push soluto/kamus:contoller-latest
      - run:
          name: push tags
          command: |
            git pull
            git push --set-upstream origin $CIRCLE_BRANCH --tags

  build-init-container:
    machine: true

    steps:
      - checkout
      - run:
          name: Build docker image
          working_directory: "init-container"
          command: docker build . -t kamus-init-container
      
      - run:
          name: Run black box tests
          working_directory: "init-container/tests"
          command: sudo INIT_CONTAINER_IMAGE=kamus-init-container ./run_test.sh
      - run:
          name: Save docker image
          command: |
            mkdir -p docker-cache
            docker save -o docker-cache/kamus-init-container.tar kamus-init-container
      - save_cache:
          key: docker_cache_key-{{ .Revision }}
          paths:
            - docker-cache
  push-init-container:
    docker:
      - image: circleci/buildpack-deps:trusty
    steps:
      - checkout 
      - setup_remote_docker
      - run:
          name: Install and configure dependencies
          command: |
            git config user.email "ci-build@soluto.com"
            git config user.name "ci-build"
      - restore_cache:
          key: docker_cache_key-{{ .Revision }}
      - add_ssh_keys:
          fingerprints:
            - "f1:c6:0c:fd:87:74:65:84:2f:6e:49:97:ec:6f:20:a5"
      - run:
          name: tag branch
          command: |
            ./ci/version_to_deploy_init.sh

      - run:
          name: Restore image
          command: |
            docker load < docker-cache/kamus-init-container.tar
            docker tag kamus-init-container soluto/kamus-init-container:$INIT_CONTAINER_DOCKER_TAG
      - run:
          name: Docker push
          working_directory: "init-container/tests"
          command: |
            docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_PASSWORD 
            docker push soluto/kamus-init-container:$INIT_CONTAINER_DOCKER_TAG
      - run:
          name: Docker push latest
          working_directory: "init-container/tests"
          command: |
            docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_PASSWORD 
            docker tag soluto/kamus-init-container:$INIT_CONTAINER_DOCKER_TAG soluto/kamus-init-container:latest
            docker push soluto/kamus-init-container:latest
      - run:
          name: push tags
          command: |
            git pull
            git push --set-upstream origin $CIRCLE_BRANCH	 --tags
  push-cli-image:
    docker:
      - image: circleci/buildpack-deps:trusty
    steps:
      - checkout 
      - setup_remote_docker 
      - run:
          name: configure git
          command: |
            git config user.email "ci-build@soluto.com"
            git config user.name "ci-build"
      - add_ssh_keys:
          fingerprints:
            - "f1:c6:0c:fd:87:74:65:84:2f:6e:49:97:ec:6f:20:a5"
      - run:
          name: tag branch
          command: |
            ./ci/version_to_deploy_cli_docker.sh
      - run:
          name: Build docker image
          working_directory: "cli"
          command: docker build . -t soluto/kamus-cli:$CLI_DOCKER_TAG
      - run:
          name: Docker push
          command: |
            docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_PASSWORD 
            docker push soluto/kamus-cli:$CLI_DOCKER_TAG
      - run:
          name: Docker push latest
          command: |
            docker tag soluto/kamus-cli:$CLI_DOCKER_TAG soluto/kamus-cli:latest
            docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_PASSWORD 
            docker push soluto/kamus-cli:latest
      - run:
          name: push tags
          command: |
            git pull
            git push --set-upstream origin $CIRCLE_BRANCH	 --tags

  build-website:
    docker:
      - image: node:8.16.0
    steps:
      - checkout 
      - setup_remote_docker 
      - run:
          name: build website
          working_directory: site
          command: |
            yarn
            yarn run build
      - persist_to_workspace:
          root: site
          paths: 
            - public

  deploy-website:
    docker:
      - image: node:8.16.0
    steps:
      - checkout 
      - attach_workspace:
          at: publish/
      - run:
          name: Install and configure dependencies
          command: |
            npm install -g --silent gh-pages@2.0.1
            git config user.email "ci-build@soluto.com"
            git config user.name "ci-build"
      - add_ssh_keys:
          fingerprints:
            - "f1:c6:0c:fd:87:74:65:84:2f:6e:49:97:ec:6f:20:a5"
      - run:
          name: Deploy docs to gh-pages branch
          command: gh-pages --message "[skip ci] Updates" --dist publish/public/

workflows:
  version: 2
  init-container:
    jobs:
      - build-init-container
      - lint-scripts
      - push-init-container:
          requires:
            - build-init-container
            - lint-scripts
          filters:
            branches:
              only: master

  api:
    jobs:
      - build-init-container
      - build_api
      - run_tests
      - lint-scripts
      - test_blackbox:
          requires:
            - build_api
            - lint-scripts
      - test_crd_1_16:
          requires:
            - build_api
            - lint-scripts
      - test_crd_1_17:
          requires:
            - build_api
            - lint-scripts
      - test_crd_1_18:
          requires:
            - build_api
            - lint-scripts
      - push-api-images:
          requires:
            - lint-scripts
            - build_api
            - run_tests
            - test_blackbox
            - test_crd_1_16
            - test_crd_1_17
            - test_crd_1_18
          filters:
            branches:
              only: master

  cli-image:
    jobs:
      - lint-scripts
      - test_cli
      - push-cli-image:
          requires:
            - lint-scripts
            - test_cli
          filters:
            branches:
              only: master
  
  website:
    jobs: 
      - build-website
      - deploy-website:
          requires:
            - build-website
          filters:
            branches:
              only: master

